{"version":3,"sources":["components/AddContactForm/AddContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["createContactContainer","state","name","number","addContactButtonHandler","length","props","createContact","setState","onInputChangeHandler","e","preventDefault","type","target","value","this","className","onChange","pattern","title","required","onClick","Component","ContactListItem","id","deleteMethod","ClassList","contactsToShow","map","Filter","filterСondition","onFilterInputChange","App","contacts","filter","sameContactNameWarning","alert","some","contact","uuidv4","currState","filterContacts","toLowerCase","includes","deleteContact","contactID","contactsFromStorage","localStorage","getItem","parsedContacts","JSON","parse","console","log","prevProps","prevState","prevContacts","setItem","stringify","AddContactForm","ContactList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7b411fc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass createContactContainer extends Component {\r\n  state = { name: \"\", number: \"\" };\r\n\r\n  addContactButtonHandler = () => {\r\n    const { name, number } = this.state;\r\n    if (this.state.name.length > 0) {\r\n      this.props.createContact(name, number);\r\n    }\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  onInputChangeHandler = (e) => {\r\n    e.preventDefault();\r\n    const type = e.target.name;\r\n    this.setState({ [type]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <div className=\"createContactContainer\">\r\n        <h3>Name</h3>\r\n        <input\r\n          value={name}\r\n          onChange={this.onInputChangeHandler}\r\n          className=\"clientInputTextfield\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n        <h3>Number</h3>\r\n        <input\r\n          value={number}\r\n          onChange={this.onInputChangeHandler}\r\n          className=\"clientInputTextfield\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n        <button\r\n          className=\"addContactButton\"\r\n          type=\"button\"\r\n          onClick={this.addContactButtonHandler}\r\n        >\r\n          Add contact\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default createContactContainer;\r\n","function ContactListItem(props) {\r\n  const { name, number, id } = props;\r\n  return (\r\n    <li>\r\n      {name}: {number}\r\n      <button\r\n        type=\"button\"\r\n        className=\"deleteButton\"\r\n        onClick={() => props.deleteMethod(id)}\r\n      >\r\n        delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ContactListItem;\r\n","import ContactListItem from \"components/ContactListItem\";\r\nfunction ClassList(props) {\r\n  return (\r\n    <div className=\"contactListContainer\">\r\n      <ul>\r\n        {props.contactsToShow.map(({ id, name, number }) => (\r\n          <ContactListItem\r\n            id={id}\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            deleteMethod={props.deleteMethod}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClassList;\r\n","function Filter(props) {\r\n  const { filterСondition, onFilterInputChange } = props;\r\n  return (\r\n    <input\r\n      value={filterСondition}\r\n      onChange={(e) => onFilterInputChange(e.target.value)}\r\n      className=\"clientInputTextfield\"\r\n      type=\"text\"\r\n    />\r\n  );\r\n}\r\nexport default Filter;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport AddContactForm from \"components/AddContactForm\";\nimport ContactList from \"components/ContactList\";\nimport Filter from \"components/Filter\";\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contactsFromStorage = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contactsFromStorage);\n\n    if (parsedContacts) {\n      console.log(parsedContacts);\n\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const prevContacts = prevState.contacts;\n    const contacts = this.state.contacts;\n\n    if (prevContacts !== contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n    }\n  }\n\n  sameContactNameWarning = (name) => {\n    alert(`${name} already exists`);\n  };\n\n  createContact = (name = \"no name\", number = \"no number\") => {\n    if (this.state.contacts.some((contact) => contact.name === name)) {\n      this.sameContactNameWarning(name);\n      return;\n    }\n    const contact = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n    this.setState((currState) => ({\n      contacts: [...currState.contacts, contact],\n    }));\n  };\n\n  onFilterInputChange = (filter) => {\n    this.setState({ filter });\n  };\n\n  filterContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  deleteContact = (contactID) => {\n    this.setState((currState) => ({\n      contacts: currState.contacts.filter(\n        (contact) => contact.id !== contactID\n      ),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n    const contactsToShow = this.filterContacts();\n    return (\n      <section className=\"phonebookSection\">\n        <h1>Phonebook</h1>\n        <AddContactForm createContact={this.createContact} />\n        <h2>Contacts</h2>\n        <Filter\n          filterСondition={filter}\n          onFilterInputChange={this.onFilterInputChange}\n        />\n        <ContactList\n          contactsToShow={contactsToShow}\n          deleteMethod={this.deleteContact}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import \"modern-normalize/modern-normalize.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}